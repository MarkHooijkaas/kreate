#!/bin/bash
# Stop on error
#set -e

#####################################################################
# helper functions

function info()    { ${INFO-true} && echo $* || true; }
function verbose() { ${VERBOSE-false} && echo $* || true; }
function debug()   { ${DEBUG-false} && echo $* || true; }
function error() { echo ERROR 1>&2 $*; exit 1; }
export -f info
export -f verbose
export -f debug
export -f error

#####################################################################
# commands
declare -A command_alias=()
commands=()

#####################################################################
# command help
commands+=(help)
kreate_start_help() {
    cat << EOF
Usage: ${0##*/} [options] [command] <dir>...

The purpose of kreate is calling kreate.sh to create files
and then optionally execute a command like git or kustomize
Options can be:
    -h|--help      display this help and exit
    -v|--verbose   verbose mode.
    -q|--quiet     quiet mode.
    --debug        debug info
    --rm           remove kreated files after all is done
    -i|--init-file use another init file
One of the following commands can be specified:
EOF
for cmd in "${commands[@]}" ; do
    printf "    %s" $line
    kreate_help_$cmd
done
cat <<EOF

Commands may be prefixed with --, e.g. --diff, or abbreviated with fewer letters
If no command is given, the default command is \'files\'
If no directory is given, the current directory . is used
If the first argument matches a directory with a kreate.sh script, it is not
interpreted as command. To specify a command, one can prefix it with --
EOF
exit 0
}
kreate_help_help() {
    echo 'help     display this help and exit'
}
####################################
# command files
command_alias[-f]=files
commands+=(files)
kreate_start_files() {
    export KREATE_FILE=kreate_file
    unset KREATE_DONE
}
kreate_final_files() {
    return
}
kreate_help_files() {
    echo 'files    kreate files'
}
####################################
# command status
commands+=(status)
kreate_start_status() {
    export KREATE_FILE=kreate_tmp_file
    export KREATE_DONE=kreate_file_status
}
kreate_final_status() {
    return
}
kreate_file_status() {
    if [[ -f $ORIG_FILE ]]; then
        verbose status $(pwd)/$ORIG_FILE
        if diff -q $ORIG_FILE $FILE >/dev/null; then
            info . $ORIG_FILE
        else
            info M $ORIG_FILE
        fi
    else
        info + $ORIG_FILE
    fi
    rm $FILE
    FILE=$ORIG_FILE
}
export -f kreate_file_status
kreate_help_status() {
    echo 'status   kreate temporary files, show if files are +/new or M/modified'
}

####################################
# command diff
commands+=(diff)
kreate_start_diff() {
    export KREATE_FILE=kreate_tmp_file
    export KREATE_DONE=kreate_file_diff
}
kreate_final_diff() {
    return
}
kreate_file_diff() {
    if [[ -f $ORIG_FILE ]]; then
        info diff $ORIG_FILE
        diff $ORIG_FILE $FILE
    else
        info no original file $ORIG_FILE
    fi
    rm $FILE
    FILE=$ORIG_FILE
}
export -f kreate_file_diff
kreate_help_diff() {
    echo 'diff     kreate temporary files, do: diff per file'
}


#####################################################################
# functions to be used in kreate.sh scripts
kreate_file() {
    if [[ "$FILE" == "/"* ]]; then
        info kreating $FILE
    else
        info kreating $(pwd)/$FILE
    fi
    [[ ! -z $KREATED_FILES ]] && echo $(pwd)/$FILE >>$KREATED_FILES
 }
kreate_tmp_file() {
    ORIG_FILE=$FILE
    FILE=tmp.kreated.$FILE
    debug kreating tmp file $FILE
}
export -f kreate_file
export -f kreate_tmp_file

#####################################################################
# initialisation
KREATE_INIT_DONE=false
kreate_init() {
    if $KREATE_INIT_DONE; then
        debug skipping init $1;
        return 0;
    fi
    if [[ -f  $1 ]] ;then
        verbose loading init file $1
        if ! source $1; then
            KREATE_INIT_DONE=true
            debug stop loading further init files, init file returned non zero
        fi
    else
        debug init file $1 not available
    fi
}

kreate_init_default() {
    kreate_init $KREATE_INIT_FILE
    kreate_init ./.kreate_init
    kreate_init ~/.kreate_init
    kreate_init /etc/kreate_init
}

#####################################################################
# parse arguments
unset command
while [ ! $# -eq 0 ]; do
    case $1 in
        -h|help|--help)
            command=help
            shift
            break
            ;;
        -v|--verbose)
            export VERBOSE=true
            export INFO=true
            ;;
        -q|--quiet)
            export VERBOSE=false
            export INFO=false
            ;;
        --rm)
            export KREATED_FILES=`pwd`/tmp.kreated.files
            ;;
        --debug)
            export VERBOSE=true
            export INFO=true
            export DEBUG=true
            ;;
        -i|--init)
            kreate_init "$2"
            shift
            ;;
        --*)
            command=${1#--}
            shift
            break
            ;;
        *)  # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done
kreate_init_default

#####################################################################
# parse arguments

find_command() {
    result=${command_alias[$1]}
    if [[ ! -z $result ]]; then
        debug found alias $1 for $result
        command=$result
        return 0
    fi
    found=false
    for cmd in "${commands[@]}"; do
        if [[ "$cmd" == "$1"* ]]; then
            if $found; then
                error command $1 ambiguous between $result and $cmd
            fi
            result=$cmd
            debug found matching command $cmd for abbreviated $1
        fi
    done
    command=$result
}

kreate_run() {
    if [[ -z $command ]]; then
        debug no command, assuming default command \'files\'
        command=files
    fi
    find_command $command
    info kreate $command $1
    if [[ -x $1/kreate.sh ]]; then
        kreate_start_$command $1
        debug executing $1/kreate.sh
        $1/kreate.sh
        kreate_final_$command $1
        debug kreate $command $1 succeeded
    else
       info Not available $1/kreate.sh
    fi
}

if [ $# -eq 0 ]; then
    debug no arguments, assume . as directory
    kreate_run .
else
    if [[ ! -x $1/kreate.sh ]]; then
        # the first argument is not a kreate directory so it must be a command
        command=$1
        shift
    fi
    for f in "$@"; do
        kreate_run $f
    done
fi
if [[ ! -z $KREATED_FILES ]]; then
    for f in `cat $KREATED_FILES`; do
        info rm $f
        rm $f
    done
    rm $KREATED_FILES
fi
