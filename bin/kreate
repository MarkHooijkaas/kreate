#!/bin/bash
# Stop on error
#set -e
# Stop on undefined var
set -u

#####################################################################
# helper functions

function info()    { ${INFO-true} && echo $* || true; }
function verbose() { ${VERBOSE-false} && echo $* || true; }
function debug()   { ${DEBUG-false} && echo $* || true; }
function error() { echo ERROR 1>&2 $*; exit 1; }
export -f info
export -f verbose
export -f debug
export -f error

#####################################################################
# commands
declare -A command_alias=()
command_alias[-h]=help
commands=()

for f in "$(dirname "$0")"/kreate-commands/*-command.inc; do
    source $f
done
#####################################################################
# functions to be used in kreate.sh scripts
kreate_file() {
    if [[ "$FILE" == "/"* ]]; then
        info kreating $FILE
    else
        info kreating $(pwd)/$FILE
    fi
    [[ ! -z ${KREATED_FILES-} ]] && echo $(pwd)/$FILE >>$KREATED_FILES
 }
kreate_tmp_file() {
    ORIG_FILE=$FILE
    FILE=tmp.kreated.$FILE
    debug kreating tmp file $FILE
}
export -f kreate_file
export -f kreate_tmp_file

#####################################################################
# initialisation
KREATE_INIT_DONE=false
kreate_init() {
    if [[ -z  ${1-} ]] ;then return 0; fi
    if $KREATE_INIT_DONE; then
        debug skipping init $1;
        return 0;
    fi
    if [[ -f  ${1-} ]] ;then
        verbose loading init file $1
        if ! source $1; then
            KREATE_INIT_DONE=true
            debug stop loading further init files, init file returned non zero
        fi
    else
        debug init file $1 not available
    fi
}

kreate_init_default() {
    kreate_init ${KREATE_INIT_FILE-}
    kreate_init ./.kreate_init
    kreate_init ~/.kreate_init
    kreate_init /etc/kreate_init
}

#####################################################################
# parse arguments
unset command
while [ ! $# -eq 0 ]; do
    case $1 in
        -h|help|--help)
            command=help
            shift
            break
            ;;
        -v|--verbose)
            export VERBOSE=true
            export INFO=true
            ;;
        -q|--quiet)
            export VERBOSE=false
            export INFO=false
            ;;
        --rm)
            export KREATED_FILES=`pwd`/tmp.kreated.files
            ;;
        --debug)
            export VERBOSE=true
            export INFO=true
            export DEBUG=true
            ;;
        -i|--init)
            if [[ -z ${2-} ]] ; then
                echo options --init and -i need an filename as argument
                exit 1
            fi
            kreate_init "$2"
            shift
            ;;
        --*)
            command=${1#--}
            shift
            break
            ;;
        *)  # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done
kreate_init_default

#####################################################################
# parse arguments

find_command() {
    result=${command_alias[$1]-}
    if [[ ! -z $result ]]; then
        debug found alias $1 for $result
        command=$result
        return 0
    fi
    found=false
    for cmd in "${commands[@]}"; do
        if [[ "$cmd" == "$1"* ]]; then
            if $found; then
                error command $1 ambiguous between $result and $cmd
            fi
            result=$cmd
            debug found matching command $cmd for command argument $1
        fi
    done
    command=$result
}

kreate_run() {
    if [[ -z ${command-} ]]; then
        debug no command, assuming default command \'files\'
        command=files
    fi
    old_command=$command
    find_command $command
    if [[ $command == help ]]; then
        kreate_start_help
        exit 0;
    fi
    if [[ -z $command ]]; then
        echo Unknown command $old_command
        exit 1
    fi
    info kreate $command $1
    if [[ -x $1/kreate.sh ]]; then
        kreate_start_$command $1
        debug executing $1/kreate.sh
        $1/kreate.sh
        kreate_final_$command $1
        debug kreate $command $1 succeeded
    else
       info Not available $1/kreate.sh
    fi
}

if [ ! $# -eq 0 ]; then
    # check if first parameter is a directory with an executable kreate.sh file
    # otherwise it is a command
    if [[ ! -x $1/kreate.sh ]]; then
        # the first argument is not a kreate directory so it must be a command
        command=$1
        debug kreate $command
        shift
    fi
fi
if [ $# -eq 0 ]; then
    debug no arguments, assume . as directory
    kreate_run .
else
    for f in "$@"; do
        kreate_run $f
    done
fi

if [[ ! -z ${KREATED_FILES-} ]]; then
    for f in `cat $KREATED_FILES`; do
        info rm $f
        rm $f
    done
    rm $KREATED_FILES
fi
